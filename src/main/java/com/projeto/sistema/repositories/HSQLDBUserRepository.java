package com.projeto.sistema.repositories;

import com.projeto.sistema.annotations.Singleton;
import com.projeto.sistema.models.User;
import com.projeto.sistema.utils.PasswordUtils;

import java.sql.*;
import java.util.Optional;

/**
 * Implementação de {@link UserRepositoryInterface} utilizando o banco de dados HSQLDB.
 * Esta classe é um Singleton, garantindo que apenas uma instância seja criada.
 */
@Singleton
public class HSQLDBUserRepository implements UserRepositoryInterface {
    private static HSQLDBUserRepository instance;

    private static final String JDBC_URL = "jdbc:hsqldb:mem:testdb";
    private static final String JDBC_USER = "SA";
    private static final String JDBC_PASSWORD = "";

    /**
     * Construtor privado para evitar criação de múltiplas instâncias.
     * Inicializa a tabela "Users" no banco de dados, caso ainda não exista.
     */
    private HSQLDBUserRepository() {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             Statement stmt = connection.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS Users (" +
                         "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                         "email VARCHAR(100) UNIQUE NOT NULL, " +
                         "password VARCHAR(255) NOT NULL, " +
                         "salt VARCHAR(255) NOT NULL)");
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao inicializar o banco de dados HSQLDB", e);
        }
    }

    /**
     * Obtém a instância única de {@link HSQLDBUserRepository}.
     *
     * @return A instância única de {@link HSQLDBUserRepository}.
     */
    public static synchronized HSQLDBUserRepository getInstance() {
        if (instance == null) {
            instance = new HSQLDBUserRepository();
        }
        return instance;
    }

    /**
     * Registra um novo usuário no banco de dados.
     * A senha é hasheada com um salt antes de ser armazenada.
     *
     * @param email       O email do usuário.
     * @param rawPassword A senha em texto puro.
     * @throws IllegalArgumentException Se o email já estiver registrado.
     */
    @Override
    public void createUser(String email, String rawPassword) {
        if (findUserByEmail(email).isPresent()) {
            throw new IllegalArgumentException("O e-mail já está registrado.");
        }

        String salt = PasswordUtils.generateSalt();
        String hashedPassword = PasswordUtils.hashWithSalt(rawPassword, salt);

        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement stmt = connection.prepareStatement(
                     "INSERT INTO Users (email, password, salt) VALUES (?, ?, ?)")) {
            stmt.setString(1, email);
            stmt.setString(2, hashedPassword);
            stmt.setString(3, salt);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao registrar usuário no HSQLDB", e);
        }
    }

    /**
     * Busca um usuário no banco de dados pelo email.
     *
     * @param email O email do usuário.
     * @return Um {@link Optional} contendo o usuário, caso encontrado.
     */
    @Override
    public Optional<User> findUserByEmail(String email) {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement stmt = connection.prepareStatement(
                     "SELECT id, email, password, salt FROM Users WHERE email = ?")) {
            stmt.setString(1, email);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    User user = new User(
                        rs.getInt("id"),
                        rs.getString("email"),
                        rs.getString("password"),
                        rs.getString("salt")
                    );
                    return Optional.of(user);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erro ao buscar usuário no HSQLDB", e);
        }
        return Optional.empty();
    }
}
